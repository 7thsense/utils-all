package com.theseventhsense.utils.aws

import java.io.{BufferedReader, InputStreamReader}
import java.net.URL

import akka.actor.ActorSystem
import com.amazonaws.auth.InstanceProfileCredentialsProvider
import com.amazonaws.regions.{Region, Regions}
import com.amazonaws.services.autoscaling.AmazonAutoScalingClient
import com.amazonaws.services.autoscaling.model.{DescribeAutoScalingGroupsRequest, DescribeAutoScalingInstancesRequest}
import com.amazonaws.services.ec2.AmazonEC2Client
import com.amazonaws.services.ec2.model.{DescribeInstancesRequest, Instance, InstanceStateName}
import com.typesafe.config.{ConfigFactory, ConfigValueFactory}

/**
 * Created by erik on 6/27/15.
 */
object AmazonAutoscaling {
  val credentials = new InstanceProfileCredentialsProvider
  val region = Region.getRegion(Regions.US_EAST_1)
  val scaling = new AmazonAutoScalingClient(credentials) { setRegion(region) }
  val ec2 = new AmazonEC2Client(credentials) { setRegion(region) }

  def instanceId: String = {
    val conn = new URL("http://169.254.169.254/latest/meta-data/instance-id").openConnection
    val in = new BufferedReader(new InputStreamReader(conn.getInputStream))
    try in.readLine() finally in.close()
  }

  def groupName(instanceId: String): String = {
    val result = scaling describeAutoScalingInstances {
      new DescribeAutoScalingInstancesRequest { setInstanceIds(instanceId :: Nil) }
    }
    result.getAutoScalingInstances.head.getAutoScalingGroupName
  }

  def groupInstanceIds(groupName: String): List[String] = {
    val result = scaling describeAutoScalingGroups new DescribeAutoScalingGroupsRequest {
      setAutoScalingGroupNames(groupName :: Nil)
    }
    result.getAutoScalingGroups.head.getInstances.toList map (_.getInstanceId)
  }

  def instanceFromId(id: String): Instance = {
    val result = ec2 describeInstances new DescribeInstancesRequest {
      setInstanceIds(id :: Nil)
    }
    result.getReservations.head.getInstances.head
  }

  def currentIp: String = instanceFromId(instanceId).getPrivateIpAddress
  def siblingIps: List[String] =
    groupInstanceIds(groupName(instanceId)) map instanceFromId collect {
      case instance if isRunning(instance) => instance.getPrivateIpAddress
    }

  val isRunning: Instance => Boolean =
    _.getState.getName == InstanceStateName.Running.toString

  val seeds = siblingIps map (ip => s"akka.tcp://akka-ec2@$ip:2551")

  val overrideConfig =
    ConfigFactory.empty()
      .withValue("akka.remote.netty.tcp.hostname", ConfigValueFactory.fromAnyRef(currentIp))
      .withValue("akka.remote.netty.tcp.port", ConfigValueFactory.fromAnyRef("2551"))
      .withValue("akka.cluster.seed-nodes", ConfigValueFactory.fromIterable(seeds))

  val system = ActorSystem("akka-ec2", overrideConfig withFallback ConfigFactory.load())

}
